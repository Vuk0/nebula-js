// Generated by CoffeeScript 1.6.3
(function() {
  var Q;

  Quintus.Math = function(Q) {
    Q.random = function(from, to) {
      return Math.floor(Math.random() * (to - from + 1) + from);
    };
    Q.normalizeAngle = function(angle) {
      var result;
      result = angle % 360;
      if (result < 0) {
        return result + 360;
      } else {
        return result;
      }
    };
    Q.angle = function(fromX, fromY, toX, toY) {
      var distX, distY, radians;
      distX = toX - fromX;
      distY = toY - fromY;
      radians = Math.atan2(distY, distX);
      return 90 + Q.normalizeAngle(Q.radiansToDegrees(radians));
    };
    Q.distance = function(fromX, fromY, toX, toY) {
      if (toX == null) {
        toX = 0;
      }
      if (toY == null) {
        toY = 0;
      }
      return Math.sqrt(Math.pow(fromX - toX, 2) + Math.pow(fromY - toY, 2));
    };
    Q.offsetX = function(angle, radius) {
      return Math.sin(angle / 180 * Math.PI) * radius;
    };
    Q.offsetY = function(angle, radius) {
      return -Math.cos(angle / 180 * Math.PI) * radius;
    };
    Q.degreesToRadians = function(degrees) {
      return degrees * (Math.PI / 180);
    };
    return Q.radiansToDegrees = function(radians) {
      return radians * (180 / Math.PI);
    };
  };

  Quintus.Util = function(Q) {
    Q.random = function(min, max) {
      return Math.random() * (max - min) + min;
    };
    return Q.center = function() {
      return {
        x: Q.width / 2,
        y: Q.height / 2
      };
    };
  };

  Q = Quintus().include('Util, Math, Sprites, Scenes, Input, 2D, Touch, UI, Audio').setup({
    development: true,
    maximize: true
  }).controls().touch().enableSound();

  Q.gravityY = 0;

  Q.gravityX = 0;

  Q.clearColor = "#000";

  Q.load(['ship1.png', 'ship2.png', 'ship3.png', 'ship4.png', 'particle.png', 'blasterShot.png', 'background.png', 'star.png', 'hit.mp3', 'blasterShot.mp3'], function() {
    return Q.stageScene('Menu');
  }, {
    progressCallback: function(loaded, total) {
      var percent_loaded;
      percent_loaded = Math.floor(loaded / total * 100);
      return document.getElementById('loading_progress').style.width = percent_loaded + '%';
    }
  });

  window.Q = Q;

  Q.component('aiHunter', {
    added: function() {
      return this.entity.on("step", this, "step");
    },
    step: function(dt) {
      var target, targetAngle, targetDistance;
      target = this.search();
      if (target) {
        targetAngle = this.entity.p.angle - Q.angle(this.entity.p.x, this.entity.p.y, target.p.x, target.p.y);
        if (targetAngle > 0) {
          this.entity.turn(dt, -Q[this.entity.className].rotation);
        } else {
          this.entity.turn(dt, Q[this.entity.className].rotation);
        }
        targetDistance = Q.distance(this.entity.p.x, this.entity.p.y, target.p.x, target.p.y);
        if (Math.abs(targetAngle) < 10 && targetDistance < 200) {
          this.entity.fire();
        }
        return this.entity.accelerate(dt);
      }
    },
    search: function(target) {
      var best, targets, _this;
      if (target == null) {
        target = null;
      }
      _this = this.entity;
      best = null;
      targets = Q("SmallShip").items;
      targets = Q._map(targets, function(target) {
        return {
          distance: Q.distance(_this.p.x, _this.p.y, target.p.x, target.p.y),
          asset: target.p.asset,
          object: target
        };
      });
      targets = Q._each(targets, function(target) {
        if (target.object !== _this && target.asset !== _this.p.asset && (!best || best.distance > target.distance)) {
          return best = target;
        }
      });
      return best && best.object;
    }
  });

  Q.component('aiWander', {
    added: function() {
      return this.entity.on("step", this, "step");
    },
    step: function(dt) {
      var targetAngle;
      if (!this.target || 50 > Q.distance(this.entity.p.x, this.entity.p.y, this.target.p.x, this.target.p.y)) {
        this.target = {
          p: {
            x: Math.random() * 1000,
            y: Math.random() * 1000
          }
        };
      }
      targetAngle = this.entity.p.angle - Q.angle(this.entity.p.x, this.entity.p.y, this.target.p.x, this.target.p.y);
      if (targetAngle > 0) {
        this.entity.turn(dt, -Q[this.entity.className].rotation);
      } else {
        this.entity.turn(dt, Q[this.entity.className].rotation);
      }
      return this.entity.accelerate(dt);
    }
  });

  Q.component('damageable', {
    added: function() {
      this.entity.on("draw", this, "draw");
      return this.entity.on("hit", this, "collision");
    },
    collision: function(col) {
      var damage;
      if (damage = col.obj.p.damage) {
        this.entity.p.hp = this.entity.p.hp - damage;
      }
      if (this.entity.p.hp <= 0) {
        return this.entity.destroy();
      }
    },
    draw: function(ctx) {
      var metrics, text;
      if (this.entity.p.hp && this.entity.p.maxHp) {
        ctx.save();
        ctx.beginPath();
        ctx.font = "400 14px ui";
        text = "" + (this.entity.p.hp / this.entity.p.maxHp * 100) + "%";
        metrics = ctx.measureText(text);
        ctx.fillStyle = "#FFF";
        ctx.rotate(Q.degreesToRadians(-this.entity.p.angle));
        ctx.fillText(text, -metrics.width / 2, -50);
        return ctx.restore();
      }
    }
  });

  Q.component('minimap', {
    added: function() {
      return this.entity.on("draw", this, "draw");
    },
    draw: function(ctx, width, height, scale) {
      var centerX, centerY, _this;
      if (width == null) {
        width = 100;
      }
      if (height == null) {
        height = 100;
      }
      if (scale == null) {
        scale = .01;
      }
      centerX = width / 2;
      centerY = height / 2;
      ctx.save();
      ctx.setTransform(1, 0, 0, 1, 0, 0);
      ctx.translate(0, 0);
      ctx.lineWidth = "2";
      ctx.beginPath();
      ctx.strokeStyle = "#FFF";
      ctx.fillStyle = "rgba(255,255,255,0.1)";
      ctx.rect(0, 0, width, height);
      ctx.fill();
      ctx.stroke();
      _this = this.entity;
      ctx.beginPath();
      Q("SmallShip").each(function() {
        var x, y;
        if (this !== _this) {
          x = centerX - ((_this.p.x - this.p.x) * scale);
          y = centerY - ((_this.p.y - this.p.y) * scale);
          ctx.strokeStyle = "#F00";
          ctx.rect(x, y, 1, 1);
          return ctx.stroke();
        }
      });
      ctx.beginPath();
      ctx.strokeStyle = "#00F";
      ctx.rect(centerX, centerY, 1, 1);
      ctx.stroke();
      return ctx.restore();
    }
  });

  Q.component('player', {
    added: function() {
      return this.entity.on("step", this, "step");
    },
    step: function(dt) {
      if (Q.inputs['up'] || Q.inputs['action']) {
        this.entity.accelerate(dt);
      } else {
        this.entity.friction(dt);
      }
      if (Q.inputs['fire']) {
        this.entity.fire();
      }
      if (Q.inputs['left']) {
        this.entity.turn(dt, -Q[this.entity.className].rotation);
      }
      if (Q.inputs['right']) {
        return this.entity.turn(dt, Q[this.entity.className].rotation);
      }
    }
  });

  Q.component('ttl', {
    added: function() {
      this.startedAt = this.now();
      return this.entity.on("step", this, "step");
    },
    step: function() {
      if (this.now() > this.startedAt + this.entity.p.ttl) {
        return this.entity.destroy();
      }
    },
    now: function() {
      return new Date().getTime();
    }
  });

  Q.Sprite.extend('Ship', {
    init: function(p) {
      this._super(Q._extend({
        type: Q.SPRITE_FRIENDLY,
        z: 10,
        hp: 10,
        maxHp: 10
      }, p));
      this.add('2d');
      return this.add('damageable');
    },
    fire: function() {
      if (this.weapon) {
        return this.weapon.tryFire(this);
      }
    },
    accelerate: function(dt) {
      var vx, vy;
      vx = this.p.vx;
      vy = this.p.vy;
      this.p.vx += Q.offsetX(this.p.angle, Q[this.className].acceleration) * dt;
      this.p.vy += Q.offsetY(this.p.angle, Q[this.className].acceleration) * dt;
      if (Q.distance(this.p.vx, this.p.vy) > Q[this.className].maxVelocity) {
        this.p.vx = vx;
        this.p.vy = vy;
      }
      return this.stage.insert(new Q.Particle({
        x: this.p.x - Q.offsetX(this.p.angle, this.p.cx),
        y: this.p.y - Q.offsetY(this.p.angle, this.p.cy),
        vx: this.p.vx - Q.offsetX(this.p.angle, Math.max(this.p.vx * 0.1, 75)),
        vy: this.p.vy - Q.offsetY(this.p.angle, Math.max(this.p.vy * 0.1, 75))
      }));
    },
    turn: function(dt, degree) {
      return this.p.angle += degree * dt;
    },
    friction: function(dt) {
      this.p.vx *= 1 - dt;
      return this.p.vy *= 1 - dt;
    }
  });

  Q.Weapon = Q.Class.extend("Weapon", {
    init: function() {
      return this.lastFired = 0;
    },
    tryFire: function(from) {
      var now;
      now = new Date().getTime();
      if (now > this.lastFired + Q[this.className].coolDown) {
        this.fire(from);
        return this.lastFired = now;
      }
    }
  });

  Q.Sprite.extend('Background', {
    init: function(p) {
      return this._super(p, {
        target: p.target,
        x: 0,
        y: 0,
        asset: 'background.png',
        type: Q.SPRITE_NONE
      });
    },
    drawOffset: 200,
    debugRender: function() {},
    draw: function(ctx) {
      var offsetX, offsetY;
      if (this.stage.viewport) {
        offsetX = this.stage.viewport.centerX - Q.width / 2;
        offsetY = this.stage.viewport.centerY - Q.height / 2;
      } else {
        offsetX = 0;
        offsetY = 0;
      }
      if (this.p.target) {
        offsetX += -this.p.target.p.vx / 10;
        offsetY += -this.p.target.p.vy / 10;
      }
      return ctx.drawImage(this.asset(), 0, 0, this.asset().width, this.asset().height, offsetX - this.drawOffset, offsetY - this.drawOffset, Q.width + this.drawOffset * 2, Q.height + this.drawOffset * 2);
    }
  });

  Q.Weapon.extend("Blaster", {
    fire: function(from) {
      var accuracy, angle, velocity;
      velocity = Q[this.className].velocity;
      accuracy = Math.floor((Math.random() * 5) - 5);
      angle = from.p.angle + accuracy;
      from.stage.insert(new Q.BlasterShot({
        x: from.p.x + Q.offsetX(from.p.angle, from.p.cx * 2.5),
        y: from.p.y + Q.offsetY(from.p.angle, from.p.cy * 2.5),
        vx: from.p.vx + Q.offsetX(angle, velocity),
        vy: from.p.vy + Q.offsetY(angle, velocity),
        angle: angle
      }));
      return Q.audio.play('blasterShot.mp3');
    }
  }, {
    coolDown: 200,
    velocity: 500
  });

  Q.Sprite.extend('BlasterShot', {
    init: function(p) {
      this._super(Q._extend({
        type: Q.SPRITE_ENEMY,
        collisionMask: Q.SPRITE_FRIENDLY,
        asset: 'blasterShot.png',
        z: 5,
        damage: 1,
        ttl: 1000
      }, p));
      this.add('2d');
      this.add('ttl');
      return this.on('hit', function(col) {
        var vd, _i;
        if (!col.obj.isA("BlasterShot")) {
          for (_i = 1; _i <= 5; _i++) {
            vd = Q.random(-5, 5);
            this.stage.insert(new Q.Particle({
              x: col.obj.p.x + vd,
              y: col.obj.p.y + vd,
              vx: col.normalX * vd,
              vy: col.normalY * vd
            }));
          }
          Q.audio.play('hit.mp3');
        }
        return this.destroy();
      });
    }
  });

  Q.Sprite.extend('MenuStar', {
    init: function(p) {
      return this._super(p, {
        x: Math.random() * Q.width,
        y: Math.random() * Q.height,
        scale: Math.max(Math.random(), .3),
        asset: 'star.png',
        type: Q.SPRITE_NONE
      });
    },
    step: function(dt) {
      if (this.p.y > Q.height) {
        this.p.y = 0;
        this.p.x = Math.random() * Q.width;
      }
      return this.p.y += dt * Math.pow(100, this.p.scale);
    }
  });

  Q.Sprite.extend('Particle', {
    init: function(p) {
      this._super(Q._extend({
        asset: 'particle.png',
        type: Q.SPRITE_NONE,
        collisionMask: Q.SPRITE_NONE,
        z: 5,
        opacity: 0.5,
        scale: 0.4
      }, p));
      return this.add('2d');
    },
    step: function(dt) {
      this.p.vx *= 1 - dt;
      this.p.vy *= 1 - dt;
      if (this.p.scale >= 0) {
        return this.p.scale -= dt;
      } else {
        return this.destroy();
      }
    },
    draw: function(ctx) {
      ctx.save();
      ctx.globalCompositeOperation = 'lighter';
      this._super(ctx);
      return ctx.restore();
    }
  });

  Q.Ship.extend('SmallShip', {
    init: function(p) {
      this._super(Q._extend({
        asset: "ship" + (Math.floor((Math.random() * 4) + 1)) + ".png"
      }, p));
      return this.weapon = new Q.Blaster;
    }
  }, {
    acceleration: 100,
    rotation: 100,
    maxVelocity: 200
  });

  Q.Sprite.extend('Star', {
    init: function(p) {
      this._super(p, {
        target: p.target,
        x: Math.random() * Q.width,
        y: Math.random() * Q.height,
        asset: 'star.png',
        scale: Math.max(Math.random(), .3),
        type: Q.SPRITE_NONE
      });
      return this.add('2d');
    },
    step: function(dt) {
      this.p.vx = this.p.target.p.vx * (Math.pow(this.p.scale, 10) / -1);
      this.p.vy = this.p.target.p.vy * (Math.pow(this.p.scale, 10) / -1);
      if (Math.abs(this.p.x - this.p.target.p.x) > Q.width || Math.abs(this.p.y - this.p.target.p.y) > Q.height) {
        this.p.x = Q.stage().viewport.x + (Math.random() * Q.width);
        return this.p.y = Q.stage().viewport.y + (Math.random() * Q.height);
      }
    }
  });

  Q.scene('Game', function(stage) {
    var enemy, player, _i, _j, _ref;
    player = new Q.SmallShip({
      x: Q.center().x,
      y: Q.center().y
    });
    player.add("player");
    player.add("minimap");
    stage.insert(new Q.Background({
      target: player
    }));
    for (_i = 1, _ref = Q.width * Q.height / 10000; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--) {
      stage.insert(new Q.Star({
        target: player
      }));
    }
    stage.insert(player);
    for (_j = 1; _j <= 6; _j++) {
      enemy = new Q.SmallShip({
        angle: Math.random() * 360,
        x: player.p.x + Math.random() * Q.random(-1000, 1000),
        y: player.p.y + Math.random() * Q.random(-1000, 1000)
      });
      enemy.add("aiHunter");
      stage.insert(enemy);
      enemy.on('destroyed', function() {
        var won;
        won = true;
        Q._each(Q("SmallShip").items, function(ship) {
          if (ship.p.hp !== 0 && ship.p.asset !== player.p.asset) {
            return won = false;
          }
        });
        if (won) {
          return setTimeout(function() {
            return Q.stageScene('Menu');
          }, 3000);
        }
      });
    }
    player.on('destroyed', function() {
      return setTimeout(function() {
        return Q.stageScene('Menu');
      }, 3000);
    });
    stage.add('viewport');
    return stage.follow(player, {
      x: true,
      y: true
    });
  });

  Q.scene('Menu', function(stage) {
    var color, x, _i, _ref;
    color = 'white';
    x = Q.width * (3 / 4);
    stage.insert(new Q.Background({
      target: null
    }));
    for (_i = 1, _ref = Q.width * Q.height / 10000; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--) {
      stage.insert(new Q.MenuStar);
    }
    stage.insert(new Q.UI.Text({
      label: 'Nebula',
      x: x,
      y: Q.height / 4,
      color: color,
      family: 'ui',
      size: 56
    }));
    stage.insert(new Q.UI.Button({
      label: 'New Game',
      x: x,
      y: Q.height / 2,
      fontColor: color,
      font: '400 24px ui'
    }, function() {
      return Q.stageScene('Game');
    }));
    return stage.insert(new Q.UI.Button({
      label: 'Quit',
      x: x,
      y: Q.height / (4 / 3),
      fontColor: color,
      font: '400 24px ui'
    }, function() {
      Q.audio.stop;
      return Q.stageScene(null);
    }));
  });

}).call(this);
