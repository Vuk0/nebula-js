// Generated by CoffeeScript 1.6.3
(function() {
  var Q;

  Array.prototype.x = function() {
    return this[0];
  };

  Array.prototype.y = function() {
    return this[1];
  };

  Quintus.Math = function(Q) {
    Q.offsetX = function(angle, radius) {
      return Math.sin(angle / 180 * Math.PI) * radius;
    };
    return Q.offsetY = function(angle, radius) {
      return -Math.cos(angle / 180 * Math.PI) * radius;
    };
  };

  Quintus.Util = function(Q) {
    return Q.center = function() {
      return {
        x: Q.width / 2,
        y: Q.height / 2
      };
    };
  };

  Q = Quintus().include('Util, Math, Sprites, Scenes, Input, 2D, Touch, UI, Audio').setup({
    development: true,
    maximize: true
  }).controls().touch().enableSound();

  Q.clearColor = "#000";

  Q.load(['spaceship.png', 'particle.png', 'background.png', 'star.png', 'menu.mp3'], function() {
    return Q.stageScene('Menu');
  }, {
    progressCallback: function(loaded, total) {
      var percent_loaded;
      percent_loaded = Math.floor(loaded / total * 100);
      return document.getElementById('loading_progress').style.width = percent_loaded + '%';
    }
  });

  window.Q = Q;

  Q.scene('Game', function(stage) {
    var player, x, y, _i, _ref;
    x = Q.center().x;
    y = Q.center().y;
    player = new Q.Player({
      x: x,
      y: y
    });
    for (_i = 1, _ref = Q.width * Q.height / 10000; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--) {
      stage.insert(new Q.Star({
        player: player
      }));
    }
    stage.insert(player);
    stage.on('destroy', function() {
      return player.destroy;
    });
    stage.add('viewport');
    return stage.follow(player, {
      x: true,
      y: true
    });
  });

  Q.scene('Menu', function(stage) {
    var color, x, _i, _ref;
    color = 'white';
    x = Q.width * (3 / 4);
    stage.insert(new Q.MenuBackground);
    for (_i = 1, _ref = Q.width * Q.height / 10000; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--) {
      stage.insert(new Q.MenuStar);
    }
    stage.insert(new Q.UI.Text({
      label: 'Nebula',
      x: x,
      y: Q.height / 4,
      color: color,
      family: 'ui',
      size: 56
    }));
    stage.insert(new Q.UI.Button({
      label: 'New Game',
      x: x,
      y: Q.height / 2,
      fontColor: color,
      font: '400 24px ui'
    }, function() {
      return Q.stageScene('Game');
    }));
    stage.insert(new Q.UI.Button({
      label: 'Quit',
      x: x,
      y: Q.height / (4 / 3),
      fontColor: color,
      font: '400 24px ui'
    }, function() {
      Q.audio.stop;
      return Q.stageScene(null);
    }));
    return Q.audio.play('menu.mp3', {
      loop: true
    });
  });

  Q.Sprite.extend('MenuBackground', {
    init: function(p) {
      return this._super(p, {
        x: 0,
        y: 0,
        asset: 'background.png',
        type: Q.SPRITE_NONE
      });
    },
    draw: function(ctx) {
      return ctx.drawImage(this.asset(), 0, 0, this.asset().width, this.asset().height, 0, 0, Q.width, Q.height);
    }
  });

  Q.Sprite.extend('MenuStar', {
    init: function(p) {
      return this._super(p, {
        x: Math.random() * Q.width,
        y: Math.random() * Q.height,
        scale: Math.random(),
        asset: 'star.png',
        type: Q.SPRITE_NONE
      });
    },
    update: function(dt) {
      if (this.p.y > Q.height) {
        this.p.y = 0;
        this.p.x = Math.random() * Q.width;
      }
      return this.p.y += dt * Math.pow(1000, this.p.scale);
    }
  });

  Q.Sprite.extend('Particle', {
    init: function(p) {
      this._super(p, {
        asset: 'particle.png',
        type: Q.SPRITE_NONE
      });
      return this.add('2d');
    },
    update: function(dt) {
      return this._super(dt);
    },
    draw: function(ctx) {
      ctx.globalCompositeOperation = 'lighter';
      if (this.p.sheet) {
        return this.sheet().draw(ctx, -this.p.cx, -this.p.cy, this.p.frame);
      } else if (this.p.asset) {
        return ctx.drawImage(Q.asset(this.p.asset), -this.p.cx, -this.p.cy);
      }
    }
  });

  Q.Sprite.extend('Player', {
    init: function(p) {
      this._super(p, {
        asset: 'spaceship.png',
        gravity: 0
      });
      this.add('2d');
      Q.input.on('up', this, 'up');
      Q.input.on('left', this, 'left');
      return Q.input.on('right', this, 'right');
    },
    up: function() {
      this.p.vx += Q.offsetX(this.p.angle, 10);
      return this.p.vy += Q.offsetY(this.p.angle, 10);
    },
    left: function() {
      return this.p.angle -= 10;
    },
    right: function() {
      return this.p.angle += 10;
    },
    update: function(dt) {
      return this._super(dt);
    }
  });

  Q.Sprite.extend('Star', {
    init: function(p) {
      return this._super(p, {
        player: p.player,
        x: Math.random() * Q.width,
        y: Math.random() * Q.height,
        scale: Math.random(),
        asset: 'star.png',
        type: Q.SPRITE_NONE
      });
    },
    update: function(dt) {
      this.p.vx = Math.pow(this.p.player.p.vx, Q.width);
      this.p.vy = Math.pow(this.p.player.p.vy, Q.width);
      if (Math.abs(this.p.x - this.p.player.p.x) > Q.width || Math.abs(this.p.y - this.p.player.p.y) > Q.height) {
        this.p.x = Q.stage().viewport.x + (Math.random() * Q.width);
        return this.p.y = Q.stage().viewport.y + (Math.random() * Q.height);
      }
    }
  });

}).call(this);
